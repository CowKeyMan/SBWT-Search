
.. _program_listing_file__home_runner_work_SBWT-Search_SBWT-Search_src_SequenceFileParser_StringBreakBatchProducer.h:

Program Listing for File StringBreakBatchProducer.h
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_SBWT-Search_SBWT-Search_src_SequenceFileParser_StringBreakBatchProducer.h>` (``/home/runner/work/SBWT-Search/SBWT-Search/src/SequenceFileParser/StringBreakBatchProducer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef STRING_BREAK_BATCH_PRODUCER_H
   #define STRING_BREAK_BATCH_PRODUCER_H
   
   #include <algorithm>
   #include <memory>
   #include <vector>
   
   #include "BatchObjects/StringBreakBatch.h"
   #include "Tools/SharedBatchesProducer.hpp"
   
   namespace sbwt_search {
   
   class ContinuousSequenceFileParser;
   
   using design_utils::SharedBatchesProducer;
   using std::shared_ptr;
   using std::vector;
   
   class StringBreakBatchProducer: public SharedBatchesProducer<StringBreakBatch> {
     friend ContinuousSequenceFileParser;
   
   public:
     StringBreakBatchProducer(StringBreakBatchProducer &) = delete;
     StringBreakBatchProducer(StringBreakBatchProducer &&) = delete;
     auto operator=(StringBreakBatchProducer &) = delete;
     auto operator=(StringBreakBatchProducer &&) = delete;
   
     explicit StringBreakBatchProducer(u64 max_batches);
   
     ~StringBreakBatchProducer() override = default;
   
   private:
     auto get_default_value() -> shared_ptr<StringBreakBatch> override;
     auto set(const vector<u64> &chars_before_newline, u64 string_size) -> void;
   };
   
   }  // namespace sbwt_search
   
   #endif
