
.. _program_listing_file__home_runner_work_SBWT-Search_SBWT-Search_src_SeqToBitsConverter_ContinuousSeqToBitsConverter.h:

Program Listing for File ContinuousSeqToBitsConverter.h
=======================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_SBWT-Search_SBWT-Search_src_SeqToBitsConverter_ContinuousSeqToBitsConverter.h>` (``/home/runner/work/SBWT-Search/SBWT-Search/src/SeqToBitsConverter/ContinuousSeqToBitsConverter.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef CONTINUOUS_SEQ_TO_BITS_CONVERTER_H
   #define CONTINUOUS_SEQ_TO_BITS_CONVERTER_H
   
   #include <string>
   
   #include "BatchObjects/StringSequenceBatch.h"
   #include "SeqToBitsConverter/BitsProducer.h"
   #include "SeqToBitsConverter/CharToBits.h"
   #include "SeqToBitsConverter/InvalidCharsProducer.h"
   #include "SequenceFileParser/StringSequenceBatchProducer.h"
   #include "Tools/SharedBatchesProducer.hpp"
   
   namespace sbwt_search {
   
   using design_utils::SharedBatchesProducer;
   using std::string;
   
   class ContinuousSeqToBitsConverter {
   private:
     shared_ptr<SharedBatchesProducer<StringSequenceBatch>> producer;
     shared_ptr<InvalidCharsProducer> invalid_chars_producer;
     shared_ptr<BitsProducer> bits_producer;
     u64 threads;
     CharToBits char_to_bits;
     u64 stream_id;
   
   public:
     ContinuousSeqToBitsConverter(
       u64 stream_id_,
       shared_ptr<SharedBatchesProducer<StringSequenceBatch>> producer,
       u64 threads,
       u64 kmer_size,
       u64 max_chars_per_batch,
       u64 invalid_chars_producer_max_batches,
       u64 bits_producer_max_batches
     );
   
     [[nodiscard]] auto get_invalid_chars_producer() const
       -> const shared_ptr<InvalidCharsProducer> &;
     [[nodiscard]] auto get_bits_producer() const
       -> const shared_ptr<BitsProducer> &;
     auto read_and_generate() -> void;
   
   private:
     auto parallel_generate(StringSequenceBatch &seq_batch) -> void;
     auto convert_int(const vector<char> &str, u64 start_index, u64 end_index)
       -> u64;
   };
   
   }  // namespace sbwt_search
   
   #endif
