
.. _program_listing_file__home_runner_work_SBWT-Search_SBWT-Search_src_Tools_CircularQueue.hpp:

Program Listing for File CircularQueue.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_SBWT-Search_SBWT-Search_src_Tools_CircularQueue.hpp>` (``/home/runner/work/SBWT-Search/SBWT-Search/src/Tools/CircularQueue.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef CIRCULAR_QUEUE_HPP
   #define CIRCULAR_QUEUE_HPP
   
   #include "Tools/TypeDefinitions.h"
   
   namespace structure_utils {
   
   using std::vector;
   
   template <class T>
   class CircularQueue {
   private:
     vector<T> q;
     u64 front_idx = 0, back_idx = 0;
   
   public:
     CircularQueue(u64 capcity): q(capcity + 1) {}
   
     auto front() -> T & { return q[front_idx]; }
   
     auto pop() -> void { front_idx = (front_idx + 1) % q.size(); }
   
     auto push(T element) -> void {
       q[back_idx] = element;
       back_idx = (back_idx + 1) % q.size();
     }
   
     auto empty() -> bool { return front_idx == back_idx; }
   
     auto full() -> bool { return (back_idx + 1) % q.size() == front_idx; }
   
     auto size() -> u64 {
       if (front_idx > back_idx) { return q.size() - (front_idx - back_idx); }
       return back_idx - front_idx;
     }
   
     auto capacity() -> u64 { return q.size() - 1; }
   };
   
   }  // namespace structure_utils
   
   #endif
